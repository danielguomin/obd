apply plugin: 'com.android.library'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.2'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
    }
}
android {
    signingConfigs {
        release {
            keyAlias 'mapbar2009.keystore'
            keyPassword 'mapbar2009'
            storeFile file('../key/mapbar2009.keystore')
            storePassword 'mapbar2009'
        }
    }
 def version=getVersionName()
    compileSdkVersion 22
    buildToolsVersion '26.0.2'
    defaultConfig {
        minSdkVersion 11
        targetSdkVersion 22
        versionName computeVersionName()
        versionCode 1
        println "<<<<<<<<<<<<<<<"+version
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        debug {
            minifyEnabled true
            buildConfigField "boolean", "IS_SHOW_LOG", getJenkinsLog()
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            println(":::::::::::::::::::::::::::::::::::"+getJenkinsLog())
            minifyEnabled true
            buildConfigField "boolean", "IS_SHOW_LOG", getJenkinsLog()
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.aar')) {
                    // 显示当前版本号
                    def fileName="ADAS_V"+getVersionName()
                    // 加入打包时间
                    //fileName = fileName + "-${releaseTime()}"
                    // 如果有渠道，显示渠道名""
                    if (variant.flavorName!=""){
                        fileName = fileName + "-${variant.flavorName}"
                    }
                    // 如果是debug版本，加入版本号
                    if ('debug'.equals(variant.buildType.name)) {
                        fileName = fileName + "debug.aar"
                    } else {
                        // 如果是release版本，直接显示
                        fileName = fileName + "-release.aar"
                    }
                    if (!fileName.contains("all")) {
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
        }

    }

    sourceSets { // 工程结构配置
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src', 'aidl']
            aidl.srcDirs = ['aidl']
            renderscript.srcDirs = ['src']

            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs'] // 配置此处才会打包jni 的.so 文件
            resources.srcDirs = ['resources', 'aidl']
            jni.srcDirs = ['jni']
        }
    }

    productFlavors {
        create('all') {

        }
    }

    lintOptions {
        quiet true
        abortOnError false
    }
    publishNonDefault true
    //渠道
    getChannels()
}


configurations {
    allDebug
    allRelease
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.jakewharton.timber:timber:4.7.0'
    compile 'com.squareup.okhttp3:okhttp:3.8.0'
    compile 'com.android.support:support-annotations:22.2.1'
}

task createJar(type: Jar, dependsOn: ['compileAllReleaseSources']) {
    archiveName = 'adas_core.jar'
    manifest {
        attributes 'Main-Clas': 'com.mapbar.hamster.core'
        attributes 'Class-Path': 'ext.libA.jar ext.libB.jar'//添加所有依赖，用空格隔开<br>    }
    }
    from('build/intermediates/classes/all/release', 'resources')
    destinationDir = file('libs')
    exclude('timber/')
    exclude('com/mapbar/hamster/bean/')
   // exclude('com/mapbar/hamster/jni/')
    exclude('com/mapbar/hamster/log/')
    //exclude('**/IAdas.class')
    exclude('**/EventType.class')
    exclude('**/IAdasCallBack.class')
    exclude('**/BuildConfig.class')
}

task proguardJar(type: proguard.gradle.ProGuardTask ,dependsOn: ['createJar']){
    configuration 'proguard-rules.pro'
    injars 'libs/adas_core.jar'
    outjars 'libs/adas_V'+getVersionName()+'.jar'
    doLast{
        delete "libs/adas_core.jar"
    }
}
//获得日期时间
def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getDefault());
}

def computeVersionName(){
    def log = System.getenv("VERSION")
    if (log==null){
        return "1.0"
    }else{
        return log.toString()
    }
}

//获得版本号
def getVersionName(){
    def log = System.getenv("VERSION")
    if (log==null){
        return "1.0"
    }else{
        return log.toString()
    }
}
//获取log
def getJenkinsLog() {
    def log = System.getenv("DEBUG")
    if (log==null){
        return "false"
    }else{
        return log.toString()
    }
}
//获得渠道号
def getChannels(){
    def channels = System.getenv("PRODUCT_FLAVOR_BUILD")
    if (channels==null){
        channels ="buding"
    }
    // String channels="local;dadad;okok"
    channels.toString().tokenize(';').each { channelItem ->
        android.productFlavors.create(channelItem, {
                // 替换渠道号
                manifestPlaceholders = [CHANNEL_NAME: channelItem]
        })
    }
}

task javaDoc(type: Javadoc) {
    def docDir = 'build/javadoc'
    title = 'ADAS_SDK'
    source = fileTree(dir: 'src', includes: ['com/mapbar/hamster/AdasCore.java','com/mapbar/hamster/bean/*.java', 'com/mapbar/hamster/core/*.java'])
    destinationDir = file(docDir)
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
    failOnError = false
    // enables links to Java 7 docs
    options.links("http://docs.oracle.com/javase/7/docs/api/ ")
    // enables links to Android docs.
    options.linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference")
}